#!/usr/bin/perl

use Mojo::Base -strict, -signatures;
use Mojo::URL;
use Mojo::UserAgent;
use Mojo::File 'tempfile';

use Curses;
use POSIX 'floor';

my $ua   = Mojo::UserAgent->new;
my $base = Mojo::URL->new('https://redmine.hal.taz.de/projects/taz_wiki_edv/');
$base->query( key => $ENV{REDMINE_ACCESS_TOKEN} );

my $pad_index = 0;
my $selected  = 0;
my @pages;

sub edit_page ($page) {
    my $res = $ua->get($base->clone->path("wiki/$page.json") => { 'Content-Type' => 'application/json' })->result;
    my $text = $res->json->{wiki_page}->{text};
    my $tempfile = tempfile;
    $tempfile->spurt($text);
    system('vim', $tempfile->to_string);
}

sub list_pages {
    @{
        $ua->get(
            $base->clone->path("wiki/index.json") =>
              { 'Content-Type' => 'application/json' }
        )->result->json->{wiki_pages}
    };
}

sub selected_page {
    $pages[ $pad_index + $selected ];
}

sub create_pad {
    my (@pages) = @_;
    my $pad = newpad( scalar @pages, $COLS );
    for my $page (@pages) {
        $pad->addstr( $page->{title} . "\n" );
    }
    return $pad;
}

sub update_pad {
    my ($pad, $clear) = @_;
    chgat($pad,$selected,0,-1,A_REVERSE,0,0);
    my $offset = floor($selected / $LINES) * $LINES;
    if ( $clear ) {
        clear;
        refresh;
    }
    prefresh( $pad, $offset, 0, 0, 0, $LINES - 1, $COLS - 1 );
}

initscr;
keypad(stdscr, 1);
noecho;
curs_set(0);
refresh; # This is the necessary but undocumented initial refresh

@pages = list_pages();
my $pad = create_pad(@pages);

update_pad($pad);

sub first_item_on_page {
    my ($selected) = @_;
     return floor($selected / $LINES) * $LINES;
}

sub set_selected {
    my ($pad, $new_value) = @_;
    my $prev_selected = $selected;
    $selected = $new_value;
    if ( $selected < 0 ) {
        $selected = 0;
    }
    elsif ( $selected > @pages - 1 ) {
        $selected = @pages - 1;
    }
    if ( $prev_selected != $selected ) {
        chgat($pad,$prev_selected,0,-1,A_NORMAL,0,0);
    }
    my $clear = first_item_on_page($prev_selected) != first_item_on_page($selected);
    update_pad($pad, $clear);

}

while (1) {
    my $key = getchar;

    if ( $key eq KEY_DOWN || $key eq 'n' ) {
        set_selected($pad, $selected + 1);
    }
    elsif ( $key eq KEY_UP || $key eq 'p' ) {
        set_selected($pad, $selected - 1);
    }
    elsif ( $key eq KEY_NPAGE || $key eq KEY_RIGHT ) {
        my $first_item_on_page = floor($selected / $LINES) * $LINES;
        if ( @pages > $first_item_on_page + $LINES ) {
            set_selected($pad, $first_item_on_page + $LINES);
        }
        else {
            set_selected($pad, @pages - 1);
        }
    }
    elsif ( $key eq KEY_PPAGE || $key eq KEY_LEFT ) {
        if ( $selected - $LINES < 0 ) {
            set_selected($pad, 0);
        }
        else {
            set_selected($pad, $selected - $LINES);
        }
    }
    elsif ( $key eq 'e' ) {
        endwin;
        edit_page($pages[$selected]->{title});
        update_pad($pad,1);
    }
    elsif ( $key eq 'q' ) {
        last;
    }
}

endwin;
exit 0;
